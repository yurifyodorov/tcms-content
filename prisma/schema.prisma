generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Run {
  id             String        @id @default(cuid())
  runNumber      Int           @unique @default(autoincrement())
  status         String
  browser        String
  platform       String
  environment    String
  featuresCount  Int
  scenariosCount Int
  stepsCount     Int
  passCount      Int           @default(0)
  failCount      Int           @default(0)
  skipCount      Int           @default(0)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  duration       Int?
  auto           Boolean
  RunFeature     RunFeature[]
  RunScenario    RunScenario[]
  RunStep        RunStep[]

  @@index([status])
  @@index([platform])
  @@index([auto])
  @@index([createdAt])
  @@index([status, createdAt])
  @@map("runs")
}

model RunFeature {
  id        String   @id @default(cuid())
  runId     String
  featureId String
  status    Status
  duration  Int?
  createdAt DateTime @default(now())

  run     Run     @relation(fields: [runId], references: [id], onDelete: Cascade)
  feature Feature @relation(fields: [featureId], references: [id], onDelete: Cascade)

  @@unique([runId, featureId])
  @@map("run_features")
}

model RunScenario {
  id         String   @id @default(cuid())
  runId      String
  scenarioId String
  status     Status
  duration   Int?
  createdAt  DateTime @default(now())

  run      Run      @relation(fields: [runId], references: [id], onDelete: Cascade)
  scenario Scenario @relation(fields: [scenarioId], references: [id], onDelete: Cascade)

  @@unique([runId, scenarioId])
  @@map("run_scenarios")
}

model RunStep {
  id           String   @id @default(cuid())
  runId        String
  stepId       String
  scenarioId   String
  status       Status
  duration     Int?
  errorMessage String?
  stackTrace   String?
  createdAt    DateTime @default(now())

  run      Run      @relation(fields: [runId], references: [id], onDelete: Cascade)
  step     Step     @relation(fields: [stepId], references: [id], onDelete: Cascade)
  scenario Scenario @relation(fields: [scenarioId], references: [id], onDelete: Cascade)

  @@unique([runId, stepId, scenarioId])
  @@map("run_steps")
}

model Feature {
  id          String       @id @default(cuid())
  keyword     String
  name        String
  description String?
  featureTags FeatureTag[]
  RunFeature  RunFeature[]

  @@map("features")
}

model Scenario {
  id           String        @id @default(cuid())
  featureId    String
  keyword      String
  name         String
  description  String?
  scenarioTags ScenarioTag[]

  steps       ScenarioStep[]
  RunScenario RunScenario[]
  RunStep     RunStep[]

  @@index([featureId])
  @@map("scenarios")
}

model Step {
  id           String         @id @default(cuid())
  keyword      String
  name         String
  media        Json?
  ScenarioStep ScenarioStep[]
  RunStep      RunStep[]

  @@map("steps")
}

model ScenarioStep {
  scenarioId String
  stepId     String

  scenario Scenario @relation(fields: [scenarioId], references: [id], onDelete: Cascade)
  step     Step     @relation(fields: [stepId], references: [id], onDelete: Cascade)

  @@id([scenarioId, stepId])
  @@map("scenario_steps")
}

model Tag {
  id           String        @id @default(cuid())
  name         String        @unique
  featureTags  FeatureTag[]
  scenarioTags ScenarioTag[]

  @@map("tags")
}

model FeatureTag {
  featureId String
  tagId     String

  feature Feature @relation(fields: [featureId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id])

  @@id([featureId, tagId])
  @@map("features_tags")
}

model ScenarioTag {
  scenarioId String
  tagId      String

  scenario Scenario @relation(fields: [scenarioId], references: [id], onDelete: Cascade)
  tag      Tag      @relation(fields: [tagId], references: [id])

  @@id([scenarioId, tagId])
  @@map("scenarios_tags")
}

enum Status {
  passed
  failed
  blocked
  retest
  skipped
  untested
}
